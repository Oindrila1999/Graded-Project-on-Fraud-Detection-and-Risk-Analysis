-- Customer Risk Analysis: Identify customers with low credit scores and high-risk loans to predict potential defaults and prioritize risk mitigation strategies.
SELECT C.CUSTOMER_ID,C.NAME, C.CREDIT_SCORE
FROM CUSTOMER_TABLE C
JOIN LOAN_TABLE L
ON C.CUSTOMER_ID = L.CUSTOMER_ID
WHERE C.CREDIT_SCORE < 650
AND L.DEFAULT_RISK = 'High'
ORDER BY 2 ASC;

-- Loan Purpose Insights: Determine the most popular loan purposes and their associated revenues to align financial products with customer demands
SELECT L.LOAN_PURPOSE,SUM(T.TRANSACTION_AMOUNT) AS REVENUE
FROM LOAN_TABLE L
JOIN TRANSACTION_TABLE T
ON L.LOAN_ID = T.LOAN_ID
WHERE L.LOAN_STATUS IN ('Approved','Closed')
GROUP BY L.LOAN_PURPOSE
ORDER BY REVENUE DESC;

-- High-Value Transactions: Detect transactions that exceed 30% of their respective loan amounts to flag potential fraudulent activities
SELECT T.TRANSACTION_ID,T.TRANSACTION_DATE,T.TRANSACTION_AMOUNT,T.TRANSACTION_TYPE
FROM TRANSACTION_TABLE T
JOIN LOAN_TABLE L 
ON T.LOAN_ID = L.LOAN_ID
WHERE T.TRANSACTION_AMOUNT > (L.LOAN_AMOUNT * 0.30);

-- Missed EMI Count: Analyze the number of missed EMIs per loan to identify loans at risk of default and suggest intervention strategies
SELECT C.CUSTOMER_ID,L.LOAN_ID,L.LOAN_PURPOSE,L.LOAN_AMOUNT,L.LOAN_STATUS,C.NAME,COUNT(T.TRANSACTION_ID) AS TOTAL_MISSED_EMI
FROM TRANSACTION_TABLE T
JOIN LOAN_TABLE L
ON T.LOAN_ID = L.LOAN_ID
JOIN CUSTOMER_TABLE C
ON C.CUSTOMER_ID = L.CUSTOMER_ID
WHERE ((T.TRANSACTION_TYPE= 'Missed EMI') OR (T.TRANSACTION_TYPE = 'EMI Payment' AND T.STATUS = 'Failed'))
GROUP BY C.CUSTOMER_ID,L.LOAN_ID,L.LOAN_PURPOSE,L.LOAN_AMOUNT,L.LOAN_STATUS,C.NAME
HAVING TOTAL_MISSED_EMI > 0
ORDER BY TOTAL_MISSED_EMI DESC;

-- Regional Loan Distribution: Examine the geographical distribution of loan disbursements to assess regional trends and business opportunities.
SELECT SUBSTR(TRIM(SUBSTRING_INDEX(C.ADDRESS, ',', -1)),1,2) AS REGION,
COUNT(L.LOAN_ID) AS TOTAL_LOANS,
SUM(L.LOAN_AMOUNT) AS TOTAL_LOAN_AMOUNT,
AVG(L.LOAN_AMOUNT) AS AVERAGE_LOAN_AMOUNT,
MAX(L.LOAN_AMOUNT) AS MAX_LOAN_AMOUNT,
MIN(L.LOAN_AMOUNT) AS MIN_LOAN_AMOUNT
FROM LOAN_TABLE L
JOIN CUSTOMER_TABLE C
ON C.CUSTOMER_ID = L.CUSTOMER_ID
GROUP BY REGION
ORDER BY TOTAL_LOAN_AMOUNT DESC;

-- Loyal Customers: List customers who have been associated with Cross River Bank for over five years and evaluate their loan activity to design loyalty programs.
SELECT C.CUSTOMER_ID,
    C.NAME,
    C.AGE,
    C.INCOME,
    C.CREDIT_SCORE,
    C.ADDRESS,
    C.CUSTOMER_SINCE,
    TIMESTAMPDIFF(YEAR, STR_TO_DATE(C.CUSTOMER_SINCE, '%m/%d/%Y'), CURDATE()) AS ASSOCIATED_YEARS,
    COUNT(L.LOAN_ID) AS TOTAL_LOANS,
    SUM(L.LOAN_AMOUNT) AS TOTAL_LOAN_AMOUNT,
    AVG(L.LOAN_AMOUNT) AS AVERAGE_LOAN_AMOUNT,
    MAX(L.LOAN_AMOUNT) AS MAX_LOAN_AMOUNT,
    MIN(L.LOAN_AMOUNT) AS MIN_LOAN_AMOUNT
FROM CUSTOMER_TABLE C
JOIN LOAN_TABLE L
ON C.CUSTOMER_ID = L.CUSTOMER_ID
WHERE TIMESTAMPDIFF(YEAR, STR_TO_DATE(C.CUSTOMER_SINCE, '%m/%d/%Y'), CURDATE()) > 5
GROUP BY C.CUSTOMER_ID, C.NAME, C.AGE, C.INCOME, C.CREDIT_SCORE, C.ADDRESS, C.CUSTOMER_SINCE, ASSOCIATED_YEARS
ORDER BY ASSOCIATED_YEARS DESC,TOTAL_LOAN_AMOUNT DESC;

-- High-Performing Loans: Identify loans with excellent repayment histories to refine lending policies and highlight successful products.
SELECT L.LOAN_ID,
L.LOAN_PURPOSE,
SUM(L.LOAN_AMOUNT) AS TOTAL_LOAN_AMOUNT,
L.REPAYMENT_HISTORY,
L.LOAN_STATUS
FROM LOAN_TABLE L
WHERE L.REPAYMENT_HISTORY >= 8
AND L.LOAN_STATUS = 'Closed'
GROUP BY L.LOAN_ID,L.LOAN_PURPOSE,L.REPAYMENT_HISTORY,L.LOAN_STATUS
ORDER BY L.REPAYMENT_HISTORY DESC;

-- Age-Based Loan Analysis: Analyze loan amounts disbursed to customers of different age groups to design targeted financial products.
SELECT 
    CASE
        WHEN C.AGE BETWEEN 18 AND 25 THEN '18-25'
        WHEN C.AGE BETWEEN 26 AND 35 THEN '26-35'
        WHEN C.AGE BETWEEN 36 AND 45 THEN '36-45'
        WHEN C.AGE BETWEEN 46 AND 55 THEN '46-55'
        WHEN C.AGE BETWEEN 56 AND 65 THEN '56-65'
        WHEN C.AGE > 65 THEN '65+'
    END AS AGE_GROUP,
    COUNT(*) AS LOAN_COUNT,
    SUM(LOAN_AMOUNT) AS TOTAL_LOAN_AMOUNT,
    AVG(LOAN_AMOUNT) AS AVG_LOAN_AMOUNT
FROM CUSTOMER_TABLE C
JOIN LOAN_TABLE L
ON C.CUSTOMER_ID = L.CUSTOMER_ID
GROUP BY AGE_GROUP
ORDER BY AGE_GROUP;

-- Seasonal Transaction Trends: Examine transaction patterns over years and months to identify seasonal trends in loan repayments.
SELECT YEAR(STR_TO_DATE(TRANSACTION_DATE,'%m/%d/%Y')) AS YEAR,
MONTH(STR_TO_DATE(TRANSACTION_DATE,'%m/%d/%Y')) AS MONTH,
COUNT(*) AS NUMBER_OF_TXN,
SUM(TRANSACTION_AMOUNT) AS TOTAL_TXN_AMT,
AVG(TRANSACTION_AMOUNT) AS AVERAGE_TXN_AMT
FROM TRANSACTION_TABLE
GROUP BY YEAR,MONTH
ORDER BY YEAR ASC, MONTH ASC;

-- Fraud Detection: Highlight potential fraud by identifying mismatches between customer address locations and transaction IP locations.
SELECT C.CUSTOMER_ID,T.TRANSACTION_ID,T.TRANSACTION_AMOUNT,T.TRANSACTION_DATE,C.ADDRESS,B.LOCATION,B.IP_ADDRESS
FROM CUSTOMER_TABLE C
JOIN BEHAVIOR_LOGS B
ON C.CUSTOMER_ID = B.CUSTOMER_ID
JOIN TRANSACTION_TABLE T
ON T.CUSTOMER_ID = C.CUSTOMER_ID
WHERE C.ADDRESS NOT LIKE CONCAT('%',B.LOCATION,'%')
ORDER BY T.TRANSACTION_DATE DESC;

-- Repayment History Analysis: Rank loans by repayment performance using window functions.
SELECT L.LOAN_ID,
L.LOAN_PURPOSE,
L.LOAN_AMOUNT,
L.LOAN_STATUS,
L.REPAYMENT_HISTORY,
RANK() OVER(ORDER BY L.REPAYMENT_HISTORY DESC, L.LOAN_AMOUNT DESC) AS REPAYMENT_RANK
FROM LOAN_TABLE L
WHERE L.LOAN_STATUS IN ('Approved','Closed')
ORDER BY REPAYMENT_RANK ASC;

-- Credit Score vs. Loan Amount: Compare average loan amounts for different credit score ranges.
SELECT
	CASE 
		WHEN C.CREDIT_SCORE BETWEEN 300 AND 550 THEN '300-550'
        WHEN C.CREDIT_SCORE BETWEEN 551 AND 599 THEN '551-599'
		WHEN C.CREDIT_SCORE BETWEEN 600 AND 750 THEN '600-750'
        WHEN C.CREDIT_SCORE > 750 THEN '750+'
	END AS CREDIT_SCORE_RANGE,
	CASE 
		WHEN C.CREDIT_SCORE BETWEEN 300 AND 550 THEN 'Very Poor'
        WHEN C.CREDIT_SCORE BETWEEN 551 AND 599 THEN 'Poor'
		WHEN C.CREDIT_SCORE BETWEEN 600 AND 750 THEN 'Good'
        WHEN C.CREDIT_SCORE > 750 THEN 'Excellent'
	END AS CREDIT_SCORE_TYPE,
    AVG(L.LOAN_AMOUNT) AS AVERAGE_LOAN
FROM CUSTOMER_TABLE C
JOIN LOAN_TABLE L
ON C.CUSTOMER_ID = L.CUSTOMER_ID
GROUP BY CREDIT_SCORE_RANGE,CREDIT_SCORE_TYPE
ORDER BY CREDIT_SCORE_RANGE DESC,CREDIT_SCORE_TYPE DESC;

-- Top Borrowing Regions: Identify regions with the highest total loan disbursements.
SELECT SUBSTR(TRIM(SUBSTRING_INDEX(C.ADDRESS, ',', -1)),1,2) AS REGION,
C.NAME,
L.LOAN_PURPOSE,
COUNT(L.LOAN_ID) AS TOTAL_LOANS,
SUM(L.LOAN_AMOUNT) AS TOTAL_LOAN_AMT
FROM LOAN_TABLE L
JOIN CUSTOMER_TABLE C
ON L.CUSTOMER_ID = C.CUSTOMER_ID
GROUP BY REGION,C.NAME,L.LOAN_PURPOSE
ORDER BY TOTAL_LOAN_AMT DESC;


-- Early Repayment Patterns: Detect loans with frequent early repayments and their impact on revenue.
SELECT
	C.CUSTOMER_ID,
    C.NAME,
    L.LOAN_ID,
    L.LOAN_AMOUNT,
    L.LOAN_DATE,
    L.LOAN_STATUS,
    COUNT(T.TRANSACTION_ID) AS EARLY_REPAY_CNT,
    SUM(T.TRANSACTION_AMOUNT) AS TOTAL_EARLY_REPAY_AMT
FROM LOAN_TABLE L
JOIN CUSTOMER_TABLE C
ON C.CUSTOMER_ID = L.CUSTOMER_ID
JOIN TRANSACTION_TABLE T
ON L.LOAN_ID = T.LOAN_ID
WHERE L.LOAN_STATUS IN ('Approved','Closed')
AND T.TRANSACTION_TYPE = 'Prepayment' 
AND T.STATUS = 'Successful'
GROUP BY C.CUSTOMER_ID,C.NAME,L.LOAN_ID,L.LOAN_AMOUNT,L.LOAN_DATE,L.LOAN_STATUS
ORDER BY EARLY_REPAY_CNT DESC,TOTAL_EARLY_REPAY_AMT DESC;

-- Feedback Correlation: Correlate customer feedback sentiment scores with loan statuses.
SELECT 
	C.NAME,
    L.LOAN_STATUS,
    AVG(IFNULL(CF.SENTIMENT_SCORE,0)) AS SENTIMENT_SCORE,
    COUNT(*) AS TOTAL_FEEDBACKS
FROM LOAN_TABLE L
JOIN CUSTOMER_FEEDBACK CF
ON L.LOAN_ID = CF.LOAN_ID
JOIN CUSTOMER_TABLE C
ON C.CUSTOMER_ID = CF.CUSTOMER_ID
GROUP BY C.NAME,L.LOAN_STATUS
ORDER BY NAME DESC;